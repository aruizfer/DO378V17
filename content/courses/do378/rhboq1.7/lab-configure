#!/bin/bash

# CHANGELOG
#   * Mon Dec 14 Ravi Srinivasan <ravis@redhat.com>
#   - Cut down unwanted vars for DO378
#   * Tue Aug 18 Jaime Ramirez <jaime.ramirez@redhat.com>
#   - Remove default values. They can be confusing
#   - Remove cluster id variable. Not used
#   - Match up key names exactly with the ones in the course
#   - Remove prompts for inferred values
#   - Save config values inmediately after they are read, so that students do not need to retype everything.
#   - Add message showing the config file path
#   * Wed May 31 Fernando Lozano <flozano@redhat.com>
#   - Add validation for GitHub account name
#   - Add validation for Quay.io account name
#   - Add validation for Nexus server
#   * Wed May 29 Fernando Lozano <flozano@redhat.com>
#   - Change order of prompts, so all info related to the OpenShift cluster is together
#   * Mon May 20 Fernando Lozano <flozano@redhat.com>
#   - Add a 'mode variable' that asks for a different sets of variables for 'development' and 'administration' courses
#   - Add variable for nexus and developer user name and password
#   - Add variable for github.com and quay.io account names
#   - Add variable for nexus host name
#   * Wed May 02 Fernando Lozano <flozano@redhat.com>
#   - Add variable for the bastion host; assumes a bastion that accepts the same key as any course VM
#   - Comment out API_DOMAIN variable: it creates the risk of having two valid ways of referring to services VM, registry, and so on
#   * Wed May 01 Razique Mahroua <rmahroua@redhat.com>
#   - Add API_DOMAIN variable
#   * Mon Apr 29 Razique Mahroua <rmahroua@redhat.com>
#   - Fix for cluster check
#   * Tue Apr 26 Fernando Lozano <flozano@redhat.com>
#   - Add variables for the services VM hostname and its registry alias
#   * Tue Apr 25 Fernando Lozano <flozano@redhat.com>
#   - Save copy of the kubeadmin auth files at ~student/auth for use by exercises
#   - Do NOT fail if the admin user and password are invalid
#   * Tue Apr 17 Fernando Lozano <flozano@redhat.com>
#   - Add check for the Master API URL which does not require valid credentials
#   * Tue Apr 09 Fernando Lozano <flozano@redhat.com>
#   - Remove cluster version variable
#   - Add wildcard domain variable
#   * Fri Apr 05 Fernando Lozano <flozano@redhat.com>
#   - initial version

# timeout for HTTP connections using curl and oc login, in seconds
TIMEOUT=6

function lab_config {

  # IMPORTANT: Keep this in sync with the course .shlib
  export RHT_OCP4_CONFIG=/usr/local/etc/ocp4.config
  export RHT_OCP4_DEFAULTS=/usr/local/etc/ocp4.defaults

  source ${RHT_OCP4_DEFAULTS} &>/dev/null
  if [ "$1" != "-d" ]; then
    source ${RHT_OCP4_CONFIG} &>/dev/null
  fi

  ### Start taking input from students

  # There are two levels of defaults: from the ocp4.defaults file and hard-coded here.
  local master_api="${RHT_OCP4_MASTER_API}"

  save_variable master_api 'API Endpoint'

  ### Initialize reasonable defaults for most variables

  # Derive default values for wildcard domain from the master api URL
  local api_hostname=$( echo "${master_api}" | sed -e 's/[^/]*\/\/\([^@]*@\)\?\([^:/]*\).*/\2/' )
  local api_domain=$( echo "${api_hostname}" | sed -e 's/[^.]*\.//' )
  local wildcard_domain="apps.${api_domain}"

  # These variables are used only by development courses

  # Derive default values for nexus host from the master api URL
  local nexus_server="nexus-common.${wildcard_domain}"

  # developer user from IdM (or other IdP)
  local dev_user="${RHT_OCP4_DEV_USER}"
  local dev_passwd="${RHT_OCP4_DEV_PASSWORD}"

  ### Continue taking input from students

  save_variable dev_user 'Username'
  save_variable dev_passwd 'Password'

  ### Display data provided by the student

  echo
  echo 'You entered:'
  echo -e " · API Endpoint:\t\t\t${master_api}"
  echo -e " · Username:\t\t\t\t${dev_user}"
  echo -e " · Password:\t\t\t\t${dev_passwd}"

  ### Display generated config

  echo
  echo 'Generated config:'
  echo -e " · API Endpoint:\t\t\t${master_api}"
  echo -e " · Wildcard Domain:\t\t\t${wildcard_domain}"
  echo -e " · Nexus Server Host:\t\t\t${nexus_server}"
  echo -e " · Username:\t\t\t\t${dev_user}"
  echo -e " · Password:\t\t\t\t${dev_passwd}"

  ### Verifying data from students

  echo
  echo 'Verifying your API Endpoint...'
  if ! curl --connect-timeout "${TIMEOUT}" -sk "${master_api}/apis/config.openshift.io/v1" &>/dev/null
  then
    fatal 2 "Cannot connect to an OpenShift 4.x API using your URL." \
            "Please verify you network connectivity and that the URL does not point to an OpenShift 3.x nor to a non-OpenShift Kubernetes API."
  fi

  echo
  echo 'Verifying your Nexus host...'
  local nexus_frozen=$(curl --connect-timeout "${TIMEOUT}" -s --header 'Accept: application/json' "http://${nexus_server}/service/rest/v1/read-only" | jq ".frozen")
  if [ "${nexus_frozen}" != "false" ]
  then
      fatal 5 "Cannot find a Nexus server at http://${nexus_server}."
  fi

  echo
  echo 'Saving your Maven settings file...'

  local maven_settings='/home/student/.m2/settings.xml'
  if !( cp -f "${maven_settings}.orig" "${maven_settings}" \
       && sed -i "s/nexus-common.apps.cluster.domain.example.com/${nexus_server}/" "${maven_settings}" )
  then
      fatal 99 "Cannot save your Maven settings file."
  fi

  echo
  echo 'Verifying your OpenShift developer user credentials...'
  if ! oc login --request-timeout "${TIMEOUT}s" -u "${dev_user}" -p "${dev_passwd}" --insecure-skip-tls-verify "${master_api}" &>/dev/null
  then
      fatal 4 "Cannot login to OpenShift using your developer credentials."
  fi

  # Perform these checks in the end because they require an authenticated user

  #XXX OCP4 allows only cluster admins to view these resources by default.
  #XXX Need to add permissions to everyone for these checks to work
  #XXX see rht-developer.yaml and rht-develer-binding.yaml

  echo
  echo 'Verifying your cluster configuration...'
  local actual=$(oc get ingresscontroller default -n openshift-ingress-operator -o jsonpath='{.status.domain}')
  if [ "${actual}" != "${wildcard_domain}" ]
  then
    fatal 3 "OpenShift reports a different wildcard domain: ${actual}."
  fi

  ### All good, save the config file

  echo
  echo 'Saving your lab configuration file...'

  save_config

  ### Tell students we are done

  echo
  echo -e '\e[32m\e[1mAll fine, lab config saved. You can now proceed with your exercises.\e[0m'
  echo
  echo -e "If you need to modify the configuration, rerun this script or directly modify the values in \e[1m${RHT_OCP4_CONFIG}\e[0m."
  echo
}

function error {
  echo -e "\e[91m$@\e[0m" 1>&2
}

function fatal {
  local code="$1"

  rm -rf "${kube_auth_tmp}"
  error ''
  error '\e[1mERROR:'

  while [ "$2" != "" ]; do
    error "$2"
    shift
  done

  exit $code
}

function save_variable {
  local variable_name="$1"
  local prompt_msg="$2"

  readline $variable_name "$prompt_msg"

  save_config
}

function readline {
  local return_var="$1"
  local prompt_msg="$2"

  local input_line=''

  while [ "${input_line}" = '' ]; do
    echo -n
    read -e -p " · Enter the ${prompt_msg}: " -i "${!return_var}" input_line
    if  [ "${input_line}" = '' ]; then
      echo "   ${prompt_msg} cannot be empty. Try again."
    fi
  done

  eval $return_var="'${input_line}'"
}

function save_config {
  if ! sudo touch "${RHT_OCP4_CONFIG}"
  then
    fatal 99 "Cannot save your lab configuration."
  fi

  sudo bash -c "cat <<EOF > ${RHT_OCP4_CONFIG}
RHT_OCP4_MASTER_API=${master_api}
RHT_OCP4_WILDCARD_DOMAIN=${wildcard_domain}
RHT_OCP4_NEXUS_SERVER=${nexus_server}
RHT_OCP4_DEV_USER=${dev_user}
RHT_OCP4_DEV_PASSWORD=${dev_passwd}
EOF"
}

if ! which oc &>/dev/null
then
  fatal 1 "Cannot find the 'oc' command in your PATH"
fi

echo
echo 'This script configures the connection parameters to access the OpenShift cluster for your lab scripts'
echo

if [ "$1" != "-d" -a "$1" != "" ]; then
  echo "Usage: $( basename $0 ) [-h|-d]"
  echo
  echo -e "  -h: displays this help message"
  echo -e "  -d: start from defaults instead of starting from last saved config"
  echo
else
  lab_config "$@"
fi
